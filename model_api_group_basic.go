/*
GLCP Unified API Routing Services API

Allow registration of information needed for routing GLCP APIs. 

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unifiedsdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiGroupBasic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiGroupBasic{}

// ApiGroupBasic struct for ApiGroupBasic
type ApiGroupBasic struct {
	ApplicationId string `json:"applicationId"`
	ApiGroup string `json:"apiGroup"`
}

type _ApiGroupBasic ApiGroupBasic

// NewApiGroupBasic instantiates a new ApiGroupBasic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiGroupBasic(applicationId string, apiGroup string) *ApiGroupBasic {
	this := ApiGroupBasic{}
	this.ApplicationId = applicationId
	this.ApiGroup = apiGroup
	return &this
}

// NewApiGroupBasicWithDefaults instantiates a new ApiGroupBasic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiGroupBasicWithDefaults() *ApiGroupBasic {
	this := ApiGroupBasic{}
	return &this
}

// GetApplicationId returns the ApplicationId field value
func (o *ApiGroupBasic) GetApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *ApiGroupBasic) GetApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *ApiGroupBasic) SetApplicationId(v string) {
	o.ApplicationId = v
}

// GetApiGroup returns the ApiGroup field value
func (o *ApiGroupBasic) GetApiGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiGroup
}

// GetApiGroupOk returns a tuple with the ApiGroup field value
// and a boolean to check if the value has been set.
func (o *ApiGroupBasic) GetApiGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiGroup, true
}

// SetApiGroup sets field value
func (o *ApiGroupBasic) SetApiGroup(v string) {
	o.ApiGroup = v
}

func (o ApiGroupBasic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiGroupBasic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicationId"] = o.ApplicationId
	toSerialize["apiGroup"] = o.ApiGroup
	return toSerialize, nil
}

func (o *ApiGroupBasic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applicationId",
		"apiGroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiGroupBasic := _ApiGroupBasic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiGroupBasic)

	if err != nil {
		return err
	}

	*o = ApiGroupBasic(varApiGroupBasic)

	return err
}

type NullableApiGroupBasic struct {
	value *ApiGroupBasic
	isSet bool
}

func (v NullableApiGroupBasic) Get() *ApiGroupBasic {
	return v.value
}

func (v *NullableApiGroupBasic) Set(val *ApiGroupBasic) {
	v.value = val
	v.isSet = true
}

func (v NullableApiGroupBasic) IsSet() bool {
	return v.isSet
}

func (v *NullableApiGroupBasic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiGroupBasic(val *ApiGroupBasic) *NullableApiGroupBasic {
	return &NullableApiGroupBasic{value: val, isSet: true}
}

func (v NullableApiGroupBasic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiGroupBasic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


