/*
GLCP Unified API Routing Services API

Allow registration of information needed for routing GLCP APIs. 

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unifiedsdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorCodeMsg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorCodeMsg{}

// ErrorCodeMsg struct for ErrorCodeMsg
type ErrorCodeMsg struct {
	// The HTTP equivalent status code
	HttpStatusCode int32 `json:"httpStatusCode"`
	// A unique machine-friendly identifier for the error from a global list of enumerated identifier strings
	ErrorCode string `json:"errorCode"`
	// A user-friendly error message
	Message string `json:"message"`
	// A unique identifier for the instance of this error. This can be used to help with troubleshooting. May be the same as a trace id (see Trace Headers) for ease of log tracing
	DebugId string `json:"debugId"`
}

type _ErrorCodeMsg ErrorCodeMsg

// NewErrorCodeMsg instantiates a new ErrorCodeMsg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorCodeMsg(httpStatusCode int32, errorCode string, message string, debugId string) *ErrorCodeMsg {
	this := ErrorCodeMsg{}
	this.HttpStatusCode = httpStatusCode
	this.ErrorCode = errorCode
	this.Message = message
	this.DebugId = debugId
	return &this
}

// NewErrorCodeMsgWithDefaults instantiates a new ErrorCodeMsg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorCodeMsgWithDefaults() *ErrorCodeMsg {
	this := ErrorCodeMsg{}
	return &this
}

// GetHttpStatusCode returns the HttpStatusCode field value
func (o *ErrorCodeMsg) GetHttpStatusCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HttpStatusCode
}

// GetHttpStatusCodeOk returns a tuple with the HttpStatusCode field value
// and a boolean to check if the value has been set.
func (o *ErrorCodeMsg) GetHttpStatusCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpStatusCode, true
}

// SetHttpStatusCode sets field value
func (o *ErrorCodeMsg) SetHttpStatusCode(v int32) {
	o.HttpStatusCode = v
}

// GetErrorCode returns the ErrorCode field value
func (o *ErrorCodeMsg) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *ErrorCodeMsg) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *ErrorCodeMsg) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetMessage returns the Message field value
func (o *ErrorCodeMsg) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorCodeMsg) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorCodeMsg) SetMessage(v string) {
	o.Message = v
}

// GetDebugId returns the DebugId field value
func (o *ErrorCodeMsg) GetDebugId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DebugId
}

// GetDebugIdOk returns a tuple with the DebugId field value
// and a boolean to check if the value has been set.
func (o *ErrorCodeMsg) GetDebugIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebugId, true
}

// SetDebugId sets field value
func (o *ErrorCodeMsg) SetDebugId(v string) {
	o.DebugId = v
}

func (o ErrorCodeMsg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorCodeMsg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["httpStatusCode"] = o.HttpStatusCode
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["message"] = o.Message
	toSerialize["debugId"] = o.DebugId
	return toSerialize, nil
}

func (o *ErrorCodeMsg) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"httpStatusCode",
		"errorCode",
		"message",
		"debugId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorCodeMsg := _ErrorCodeMsg{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorCodeMsg)

	if err != nil {
		return err
	}

	*o = ErrorCodeMsg(varErrorCodeMsg)

	return err
}

type NullableErrorCodeMsg struct {
	value *ErrorCodeMsg
	isSet bool
}

func (v NullableErrorCodeMsg) Get() *ErrorCodeMsg {
	return v.value
}

func (v *NullableErrorCodeMsg) Set(val *ErrorCodeMsg) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorCodeMsg) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorCodeMsg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorCodeMsg(val *ErrorCodeMsg) *NullableErrorCodeMsg {
	return &NullableErrorCodeMsg{value: val, isSet: true}
}

func (v NullableErrorCodeMsg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorCodeMsg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


