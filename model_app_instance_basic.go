/*
GLCP Unified API Routing Services API

Allow registration of information needed for routing GLCP APIs. 

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unifiedsdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppInstanceBasic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppInstanceBasic{}

// AppInstanceBasic struct for AppInstanceBasic
type AppInstanceBasic struct {
	ApplicationInstanceId string `json:"applicationInstanceId"`
	Region string `json:"region"`
	ApplicationId string `json:"applicationId"`
}

type _AppInstanceBasic AppInstanceBasic

// NewAppInstanceBasic instantiates a new AppInstanceBasic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInstanceBasic(applicationInstanceId string, region string, applicationId string) *AppInstanceBasic {
	this := AppInstanceBasic{}
	this.ApplicationInstanceId = applicationInstanceId
	this.Region = region
	this.ApplicationId = applicationId
	return &this
}

// NewAppInstanceBasicWithDefaults instantiates a new AppInstanceBasic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInstanceBasicWithDefaults() *AppInstanceBasic {
	this := AppInstanceBasic{}
	return &this
}

// GetApplicationInstanceId returns the ApplicationInstanceId field value
func (o *AppInstanceBasic) GetApplicationInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationInstanceId
}

// GetApplicationInstanceIdOk returns a tuple with the ApplicationInstanceId field value
// and a boolean to check if the value has been set.
func (o *AppInstanceBasic) GetApplicationInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationInstanceId, true
}

// SetApplicationInstanceId sets field value
func (o *AppInstanceBasic) SetApplicationInstanceId(v string) {
	o.ApplicationInstanceId = v
}

// GetRegion returns the Region field value
func (o *AppInstanceBasic) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *AppInstanceBasic) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *AppInstanceBasic) SetRegion(v string) {
	o.Region = v
}

// GetApplicationId returns the ApplicationId field value
func (o *AppInstanceBasic) GetApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *AppInstanceBasic) GetApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *AppInstanceBasic) SetApplicationId(v string) {
	o.ApplicationId = v
}

func (o AppInstanceBasic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppInstanceBasic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicationInstanceId"] = o.ApplicationInstanceId
	toSerialize["region"] = o.Region
	toSerialize["applicationId"] = o.ApplicationId
	return toSerialize, nil
}

func (o *AppInstanceBasic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applicationInstanceId",
		"region",
		"applicationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppInstanceBasic := _AppInstanceBasic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppInstanceBasic)

	if err != nil {
		return err
	}

	*o = AppInstanceBasic(varAppInstanceBasic)

	return err
}

type NullableAppInstanceBasic struct {
	value *AppInstanceBasic
	isSet bool
}

func (v NullableAppInstanceBasic) Get() *AppInstanceBasic {
	return v.value
}

func (v *NullableAppInstanceBasic) Set(val *AppInstanceBasic) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInstanceBasic) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInstanceBasic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInstanceBasic(val *AppInstanceBasic) *NullableAppInstanceBasic {
	return &NullableAppInstanceBasic{value: val, isSet: true}
}

func (v NullableAppInstanceBasic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInstanceBasic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


