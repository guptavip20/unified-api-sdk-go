/*
GLCP Unified API Routing Services API

Allow registration of information needed for routing GLCP APIs. 

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unifiedsdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomerProvisionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerProvisionList{}

// CustomerProvisionList struct for CustomerProvisionList
type CustomerProvisionList struct {
	Items []CustomerProvisionExtended `json:"items"`
	Count int32 `json:"count"`
	Next string `json:"next"`
}

type _CustomerProvisionList CustomerProvisionList

// NewCustomerProvisionList instantiates a new CustomerProvisionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerProvisionList(items []CustomerProvisionExtended, count int32, next string) *CustomerProvisionList {
	this := CustomerProvisionList{}
	this.Items = items
	this.Count = count
	this.Next = next
	return &this
}

// NewCustomerProvisionListWithDefaults instantiates a new CustomerProvisionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerProvisionListWithDefaults() *CustomerProvisionList {
	this := CustomerProvisionList{}
	return &this
}

// GetItems returns the Items field value
func (o *CustomerProvisionList) GetItems() []CustomerProvisionExtended {
	if o == nil {
		var ret []CustomerProvisionExtended
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CustomerProvisionList) GetItemsOk() ([]CustomerProvisionExtended, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CustomerProvisionList) SetItems(v []CustomerProvisionExtended) {
	o.Items = v
}

// GetCount returns the Count field value
func (o *CustomerProvisionList) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *CustomerProvisionList) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *CustomerProvisionList) SetCount(v int32) {
	o.Count = v
}

// GetNext returns the Next field value
func (o *CustomerProvisionList) GetNext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *CustomerProvisionList) GetNextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *CustomerProvisionList) SetNext(v string) {
	o.Next = v
}

func (o CustomerProvisionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerProvisionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["count"] = o.Count
	toSerialize["next"] = o.Next
	return toSerialize, nil
}

func (o *CustomerProvisionList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"count",
		"next",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerProvisionList := _CustomerProvisionList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomerProvisionList)

	if err != nil {
		return err
	}

	*o = CustomerProvisionList(varCustomerProvisionList)

	return err
}

type NullableCustomerProvisionList struct {
	value *CustomerProvisionList
	isSet bool
}

func (v NullableCustomerProvisionList) Get() *CustomerProvisionList {
	return v.value
}

func (v *NullableCustomerProvisionList) Set(val *CustomerProvisionList) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerProvisionList) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerProvisionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerProvisionList(val *CustomerProvisionList) *NullableCustomerProvisionList {
	return &NullableCustomerProvisionList{value: val, isSet: true}
}

func (v NullableCustomerProvisionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerProvisionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


